openapi: '3.0.0'
info:
  title: Shopstack API
  version: 1.0.0
  description: A RESTful API that powers an ecommerce frontend. Ensure to change the server url to the port your local copy is running on
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3080/api
tags:
  - name: departments
    description: Everything about the departments endpoint
  - name: categories
    description: Everything about the categories endpoint
  - name: attributes
    description: Everything about the attributes endpoint
  - name: products
    description: Everything about the products endpoint

paths:
  /departments:
    get:
      tags:
        - departments
      summary: Get a list of all departments
      responses:
        '200':
          description: An array of department objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'departments retrieved successfully'
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/DepartmentWithID'
  /departments/{department_id}:
    get:
      tags:
        - departments
      summary: Get a single department
      parameters:
        - name: department_id
          in: path
          description: id of the department to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single department object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                    properties:
                      data:
                        $ref: './schemas.yaml#/components/schemas/Department'
        '404':
          description: The department does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: department not found

  /categories:
    get:
      tags:
        - categories
      summary: Get a list of all categories
      responses:
        '200':
          description: An array of category objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'categories retrieved successfully'
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/CategoryWithID'
  /categories/{category_id}:
    get:
      tags:
        - categories
      summary: Get a single category
      parameters:
        - name: category_id
          in: path
          description: id of the category to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single category object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: category retrieved successfully
                      data:
                        $ref: './schemas.yaml#/components/schemas/Category'
        '404':
          description: The department does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: department not found
  /categories/inProduct/{product_id}:
    get:
      tags:
        - categories
      summary: Get the category of a product
      parameters:
        - name: product_id
          in: path
          description: id of the product whose category is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single category object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: categories retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/CategoriesInProduct'
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: no categories found for product with ID [product_id]
  /categories/inDepartment/{department_id}:
    get:
      tags:
        - categories
      summary: Get the category of a department
      parameters:
        - name: department_id
          in: path
          description: id of the department whose category is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of category objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: categories retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/CategoryWithID'
        '404':
          description: The department does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: no categories found for department with ID [department_id]

  /attributes:
    get:
      tags:
        - attributes
      summary: Get a list of all attributes
      responses:
        '200':
          description: An array of attribute objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'attributes retrieved successfully'
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/Attribute'
  /attributes/{attribute_id}:
    get:
      tags:
        - attributes
      summary: Get a single attribute
      parameters:
        - name: attribute_id
          in: path
          description: id of the attribute to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single attribute object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                    properties:
                      data:
                        $ref: './schemas.yaml#/components/schemas/Attribute'
        '404':
          description: The attribute does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: attribute not found
  /attributes/values/{attribute_id}:
    get:
      tags:
        - attributes
      summary: Get the values of a single attribute
      parameters:
        - name: attribute_id
          in: path
          description: id of the attribute whose values is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of attribute value objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                    properties:
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/AttributeValue'
        '404':
          description: The attribute does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: value not found for attribute with ID [attribute_id]
  /attributes/inProduct/{product_id}:
    get:
      tags:
        - attributes
      summary: Get the attributes of a product
      parameters:
        - name: product_id
          in: path
          description: id of the product whose attributes is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product attribute objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: product attributes retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/ProductAttribute'
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: attributes not found for product with ID [product_id]

  /products:
    get:
      tags:
        - products
      summary: Get a list of all products
      parameters:
        - name: page
          in: query
          description: current page of results
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: number of products to return per query
          required: false
          schema:
            type: integer
            default: 20
        - name: descriptionLength
          in: query
          description: length of the description of each product
          required: false
          schema:
            type: integer
            default: 200
      responses:
        '200':
          description: An array of product objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'products retrieved successfully'
                      data:
                        $ref: './schemas.yaml#/components/schemas/ProductPagination'
  /products/search:
    get:
      tags:
        - products
      summary: Search for products
      parameters:
        - name: queryString
          in: query
          description: search term to match
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: current page of results
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: number of products to return per query
          required: false
          schema:
            type: integer
            default: 20
        - name: descriptionLength
          in: query
          description: length of the description of each product
          required: false
          schema:
            type: integer
            default: 200
      responses:
        '200':
          description: An array of search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'results retrieved successfully'
                      data:
                        $ref: './schemas.yaml#/components/schemas/SearchPagination'
        '404':
          description: No product matches the search term
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: no product matches those criteria
  /products/{product_id}:
    get:
      tags:
        - products
      summary: Get a single product
      parameters:
        - name: product_id
          in: path
          description: id of the product to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single product object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - message
                      - data
                    properties:
                      message:
                        example: 'product retrieved successfully'
                      data:
                        $ref: './schemas.yaml#/components/schemas/SingleProduct'
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: product not found
  /products/inCategory/{category_id}:
    get:
      tags:
        - products
      summary: Get all products in a category
      parameters:
        - name: category_id
          in: path
          description: id of the category whose products is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: categories retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/ProductPagination'
        '404':
          description: The category does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: no product found for category with ID [category_id]
  /products/inDepartment/{department_id}:
    get:
      tags:
        - products
      summary: Get all products in a department
      parameters:
        - name: department_id
          in: path
          description: id of the department whose products is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product objects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: categories retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/ProductPagination'
        '404':
          description: The department does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: no product found for department with ID [department_id]
  /products/{product_id}/locations:
    get:
      tags:
        - products
      summary: Get the locations of a product
      parameters:
        - name: product_id
          in: path
          description: id of the product whose locations is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product locations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: categories retrieved successfully
                      data:
                        $ref: './schemas.yaml#/components/schemas/ProductLocations'
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: location details not found for product with ID [product_id]
  /products/{product_id}/reviews:
    get:
      tags:
        - products
      summary: Get the reviews of a product
      parameters:
        - name: product_id
          in: path
          description: id of the product whose reviews is to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product reviews
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: reviews retrieved successfully
                      data:
                        type: array
                        items:
                          $ref: './schemas.yaml#/components/schemas/ProductReview'
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: product not found | no reviews found
    post:
      tags:
        - products
      summary: Get the reviews of a product
      parameters:
        - name: product_id
          in: path
          description: id of the product whose reviews is to be retrieved
          required: true
          schema:
            type: integer
        - name: review
          in: requestBody
          description: review of the product
          required: true
          schema:
            type: string
        - name: rating
          in: requestBody
          description: rating of the product (1 - 5)
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: An array of product reviews
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Success'
                  - required:
                      - data
                      - message
                    properties:
                      message:
                        example: reviews retrieved successfully
                      data:
                        type: boolean
                        example: true
        '404':
          description: The product does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './schemas.yaml#/components/schemas/Error'
                  - required:
                      - message
                    properties:
                      message:
                        type: string
                        example: product not found
